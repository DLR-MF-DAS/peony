#!/usr/bin/env python
# -*- coding: utf-8 -*-

import click
import json
import subprocess
import pathlib
import os
from peony.hpc import pipeline_on_uniform_grid
from pypyr import pipelinerunner


@click.command()
@click.option('-g', '--geojson', help='GeoJSON with the area you are interested in')
@click.option('-p', '--pipeline', help='Pipeline to run on the specified area')
@click.option('-w', '--workdir', help='Working directory to use for intermediate results')
@click.option('-t', '--tile-size', help='Size of the tiles used when processing', default=0.25)
@click.option('-r', '--post-pipeline', help='Post processing pipeline, takes the following arguments: geojson, geojson_name, lab_names, pro_names')
def main(geojson, pipeline, workdir, tile_size, post_pipeline):
    geojson_name = pathlib.Path(geojson).stem
    with open(geojson, 'r') as fd:
        data = json.load(fd)
    polygon = data['features'][0]['geometry']['coordinates'][0]
    lon_start = min(p[0] for p in polygon)
    lon_end = max(p[0] for p in polygon)
    lat_start = min(p[1] for p in polygon)
    lat_end = max(p[1] for p in polygon)
    indices = pipeline_on_uniform_grid(workdir, pipeline, tile_size, longitude_range=(lon_start, lon_end), latitude_range=(lat_start, lat_end), n_jobs=1, overlap_percentage=0)
    lab_names = " ".join([os.path.join(workdir, f"{i}_{j}", f"{i}_{j}_lab.tif") for i, j in indices])
    pro_names = " ".join([os.path.join(workdir, f"{i}_{j}", f"{i}_{j}_pro.tif") for i, j in indices])
    pipelinerunner.run(post_pipeline, dict_in={'geojson': geojson, 'geojson_name': geojson_name, 'lab_names': lab_names, 'pro_names': pro_names})

if __name__ == '__main__':
    main()
