#!/usr/bin/env python
# -*- coding: utf-8 -*-

from peony.db import query_polygon
import click
from jinja2 import Template
from pathlib import Path
import numpy as np
import os
import sys

@click.command()
@click.option("-p", "--polygon", help="GeoJSON file with a polygon of interest", required=True)
@click.option("-d", "--database", help="SQLite file with the metadata database", required=True)
@click.option("-i", "--template", help="Jinja2 template file to fill in with file names, will pass a list of tuples to the template of the form (filename, name, date)")
@click.option("-o", "--output", help="Output file constructed from the user specified template", default=None)
@click.option("--date-range", help="Date range for the query (dd.mm.yyyy-dd.mm.yyyy format)", default=None)
@click.option("--batch-size", help="Number of jobs to run in parallel. If set to an integer then that number of image information will be passed to the templating engine. If not specified all images matching query will be passed", default=0)
def main(polygon, database, template, output, date_range, batch_size):
    if date_range is not None:
        import datetime
        date_pair = date_range.strip().split('-')
        date_pair = (datetime.datetime.strptime(date_pair[0], '%d.%m.%Y'),
                     datetime.datetime.strptime(date_pair[1], '%d.%m.%Y'))
    else:
        date_pair = None
    result = query_polygon(database, polygon, date_pair)
    result = [
        {
            'filename' : image.path,
            'name' : image.name,
            'date' : image.date,
            'path' : str(Path(image.path).parent.absolute())
        } for image in result]
    if template is None:
        for entry in result:
            if not os.path.exists(entry['filename']):
                print("WARNING: File not found {}".format(entry['filename']), file=sys.stderr)
            print(entry['filename'], entry['name'], entry['date'], entry['path'])
    else:
        with open(template, 'r') as fd:
            j2_template = Template(fd.read())
        # If batch size is not specified will use all of the images matching the query
        if batch_size == 0:
            batch_size = len(result)
        for i, batch in enumerate(np.array_split(result, batch_size)):
            batch = list(batch)
            script = j2_template.render({'images' : batch})
            # If output file is not specified will default to printing to stdout
            if output is None:
                print(script)
            else:
                with open(Path(output, f"batch_{i + 1}.sh"), 'w') as fd:
                    fd.write(script)

if __name__ == '__main__':
    main()


