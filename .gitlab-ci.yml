# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

default:
  image: ubuntu:20.04

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - apt-get update
    - DEBIAN_FRONTEND=noninteractive apt-get --fix-missing --yes install python3-pip libsqlite3-mod-spatialite
    - pip3 install geoalchemy2 spatialite setuptools pytest shapely pyreproj
    - python3 setup.py develop
    - pytest test/

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  variables:
    DOCKERHUB_USER: $DOCKERHUB_USER
    DOCKERHUB_PASS: $DOCKERHUB_PASS
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --yes install sudo wget ca-certificates curl gnupg lsb-release build-essential
    - wget https://github.com/hpc/charliecloud/releases/download/v0.28/charliecloud-0.28.tar.gz && tar -xvzf charliecloud-0.28.tar.gz && cd charliecloud-0.28 && ./configure && make && make install && cd ..
    - mkdir -p /etc/apt/keyrings && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get --yes install docker-ce docker-ce-cli containerd.io docker-compose-plugin
    - cp docker/Dependencies ./Dockerfile && docker build -t peony_deps:latest -f Dockerfile . && docker tag peony_deps:latest $DOCKERHUB_USER/peony_deps:latest && docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS && docker push $DOCKERHUB_USER/peony_deps:latest
#    - cp docker/Dockerfile ./Dockerfile && docker build -t peony:latest -f Dockerfile . && docker tag peony:latest $DOCKERHUB_USER/peony:latest && docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS && docker push $DOCKERHUB_USER/peony:latest